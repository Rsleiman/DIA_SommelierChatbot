import instructor
from pydantic import Field
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent.parent.parent))
from src.llm.client import llm
from atomic_agents.agents.base_agent import BaseIOSchema, BaseAgent, BaseAgentConfig, AgentMemory, SystemPromptGenerator
from src.rag.create_chroma_basic import docs

sommelier_memory = AgentMemory()


class CustomInputSchema(BaseIOSchema):
    """Custom input schema for the agent."""
    query: str = Field(description="The query to be processed by the agent.")

class CustomOutputSchema(BaseIOSchema):
    """Custom output schema for the agent."""
    response: str = Field(description="The response generated by the agent.")


initial_message = CustomOutputSchema(
    response="Hello! Welcome to our restaurant.\
        Can I interest you in any wine to pair with your meal?",
)
sommelier_memory.add_message("assistant", initial_message)


sommelier_with_menu_system_prompt_generator = SystemPromptGenerator(
    background= [
        "You are a sommelier at a restaurant.",
        "You are here to help customers choose the best wine to pair with their meal.",
        "You are knowledgeable about different types of wines and their characteristics.",
        "You are passionate about wine and food and you are proud of your opinions and heritage."
        "You are friendly and personable. You have a good sense of humor. You also have no problem being direct.",
        "You are not afraid to say no to a customer if you think they are making a bad choice.",
        "Here are the menus from which you can choose foods and wines:",
        "FOOD MENU:",
        f"{docs[0].text_resource.text}", # type: ignore
        "\n",
        "WINE MENU:",
        f"{docs[1].text_resource.text}", # type: ignore
    ],
    steps= [
        "You will check the customer's meal and wine preferences.",
        "You will suggest a wine from the menu that pairs well with their meal, or vice versa.",
        "You will explain why the wine or food is a good choice.",
        "If the user gauges interest, you will provide additional information about the wine, such as its region and flavor profile."
    ], 
    output_instructions=[
        "You will provide clear and concise response.",
        "You will friendly, but show passion in your responses, engaging the user.",
        "Do not be too formal and professional. Be personable.",
        "If identifying a dish, only mention the main ingredient. Do mention the cooking method and ingredients if they are relevant to the wine pairing.",
    ]
)

sommelier_agent = BaseAgent(
    config=BaseAgentConfig(
        client=instructor.from_openai(llm),
        model="gpt-4o-mini",
        system_prompt_generator=sommelier_with_menu_system_prompt_generator,
        memory=sommelier_memory,
        input_schema=CustomInputSchema,
        output_schema=CustomOutputSchema
    ) # type: ignore
)
